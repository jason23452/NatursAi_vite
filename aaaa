const generateClassName = (category, escapedKey, value) => {
  const baseClass = (name, property) => ({ [`.${name}`]: { [property]: value } });

  switch (category) {
    case 'width':
      return baseClass(`w-${escapedKey}`, 'width');
    case 'borderWidth':
      return baseClass(`border-${escapedKey}`, 'border-width');
    case 'height':
      return baseClass(`h-${escapedKey}`, 'height');
    case 'letterSpacing':
      return baseClass(`tracking-${escapedKey}`, 'letter-spacing');
    case 'fontSize':
      return baseClass(`text-${escapedKey}`, 'font-size');
    case 'lineHeight':
      return baseClass(`leading-${escapedKey}`, 'line-height');
    case 'borderRadius':
      return baseClass(`rounded-${escapedKey}`, 'border-radius');
    case 'margin':
      return {
        [`.mt-${escapedKey}`]: { 'margin-top': value },
        [`.mb-${escapedKey}`]: { 'margin-bottom': value },
        [`.ml-${escapedKey}`]: { 'margin-left': value },
        [`.mr-${escapedKey}`]: { 'margin-right': value },
        [`.mx-${escapedKey}`]: { 'margin-left': value, 'margin-right': value },
        [`.my-${escapedKey}`]: { 'margin-top': value, 'margin-bottom': value },
      };
    case 'padding':
      return {
        [`.pt-${escapedKey}`]: { 'padding-top': value },
        [`.pb-${escapedKey}`]: { 'padding-bottom': value },
        [`.pl-${escapedKey}`]: { 'padding-left': value },
        [`.pr-${escapedKey}`]: { 'padding-right': value },
        [`.px-${escapedKey}`]: { 'padding-left': value, 'padding-right': value },
        [`.py-${escapedKey}`]: { 'padding-top': value, 'padding-bottom': value },
      };
    case 'space':
      return {
        [`.space-x-${escapedKey} > :not([hidden]) ~ :not([hidden])`]: {
          '--tw-space-x-reverse': '0',
          'margin-right': `calc(${value} * var(--tw-space-x-reverse))`,
          'margin-left': `calc(${value} * calc(1 - var(--tw-space-x-reverse)))`,
        },
        [`.space-y-${escapedKey} > :not([hidden]) ~ :not([hidden])`]: {
          '--tw-space-y-reverse': '0',
          'margin-top': `calc(${value} * calc(1 - var(--tw-space-y-reverse)))`,
          'margin-bottom': `calc(${value} * var(--tw-space-y-reverse))`,
        },
      };
    case 'inset':
      const generateInset = (pos) => ({
        [`.${pos}-${escapedKey}`]: { [pos]: value },
        [`.${pos}-${escapedKey}`.replace(pos, `-${pos}`)]: { [pos]: `-${value}` },
      });
      return {
        ...generateInset('top'),
        ...generateInset('bottom'),
        ...generateInset('left'),
        ...generateInset('right'),
      };
    default:
      return baseClass(`${category}-${escapedKey}`, category);
  }
};
